steps:
- task: NodeTool@0
  inputs:
    versionSpec: "8.12.0"
#- task: geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@2
#  inputs:
#    versionSpec: "1.10.1"
- powershell: |
    npm install -g yarn
  displayName: hernad - Install yarn with npm
- task: UsePythonVersion@0
  inputs:
    versionSpec: '2.x'
    addToPath: true
- powershell: |
    . build/azure-pipelines/win32/exec.ps1
    $ErrorActionPreference = "Stop"
    # "machine monacotools.visualstudio.com password $(VSO_PAT)" | Out-File "$env:USERPROFILE\_netrc" -Encoding ASCII
    $env:npm_config_arch="$(VSCODE_ARCH)"
    $env:CHILD_CONCURRENCY="1"
    # $env:VSCODE_MIXIN_PASSWORD="$(VSCODE_MIXIN_PASSWORD)"
    exec { yarn }
    # exec { npm run gulp -- hygiene }
    exec { npm run monaco-compile-check }
    exec { npm run strict-null-check }
    exec { npm run gulp -- mixin }
    exec { node build/azure-pipelines/common/installDistro.js }
    exec { node build/lib/builtInExtensions.js }
  displayName: yarn prep
#- powershell: |
#    yarn gulp electron
#  displayName: Download Electron
# - powershell: |
#    yarn gulp hygiene
#  displayName: Run Hygiene Checks
#- powershell: |
#    yarn monaco-compile-check
#  displayName: Run Monaco Editor Checks
#- script: |
#    yarn strict-null-check
#  displayName: Run Strict Null Checks
#- powershell: |
#    yarn compile
#  displayName: Compile Sources
#- powershell: |
#    yarn download-builtin-extensions
#  displayName: Download Built-in Extensions
#- powershell: |
#    .\scripts\test.bat --tfs "Unit Tests"
#  displayName: Run Unit Tests
#- powershell: |
#    .\scripts\test-integration.bat --tfs "Integration Tests"
#  displayName: Run Integration Tests
#- task: PublishTestResults@2
#  displayName: Publish Tests Results
#  inputs:
#    testResultsFiles: '*-results.xml'
#    searchFolder: '$(Build.ArtifactStagingDirectory)/test-results'
#  condition: succeededOrFailed()

- powershell: |
    # https://github.com/electron/electron/blob/master/docs/tutorial/using-native-node-modules.md
    # yarn add --dev electron-rebuild
    # node_modules\.bin\electron-rebuild --version $(ELECTRON_VERSION) --arch ia32
    npx gulp vscode-win32-$(VSCODE_ARCH)-min
    npx gulp vscode-win32-$(VSCODE_ARCH)-copy-inno-updater
    npx gulp vscode-win32-$(VSCODE_ARCH)-inno-updater
    npx gulp vscode-win32-$(VSCODE_ARCH)-user-setup
    # npx gulp vscode-win32-ia32-archive

  displayName: "win32 build $(VSCODE_ARCH) zip"

#- task: ArchiveFiles@2
#  inputs:
#    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/.build/win32-ia32/archive/VSCode-win32-ia32.zip'
    #rootFolderOrFile: '$(System.DefaultWorkingDirectory)/../VSCode-win32-ia32'
#    includeRootFolder: false


- task: CopyFiles@2
  inputs:
    contents: .build\win32-ia32\archive\*.zip
    targetFolder: $(Build.ArtifactStagingDirectory)
- task: CopyFiles@2
  inputs:
    contents: .build\win32-ia32\**\*.exe
    targetFolder: $(Build.ArtifactStagingDirectory)


- task: PublishBuildArtifacts@1
  inputs:
     artifactName: drop-win32-ia32