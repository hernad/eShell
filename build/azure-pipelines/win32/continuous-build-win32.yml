steps:
- task: NodeTool@0
  inputs:
    versionSpec: "8.12.0"
#- task: geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@2
#  inputs:
#    versionSpec: "1.10.1"
- powershell: |
    npm install -g yarn
  displayName: hernad - Install yarn with npm
- task: UsePythonVersion@0
  inputs:
    versionSpec: '2.x'
    addToPath: true
- powershell: |
    yarn
  displayName: Install Dependencies
- powershell: |
    yarn gulp electron
  displayName: Download Electron
# - powershell: |
#    yarn gulp hygiene
#  displayName: Run Hygiene Checks
- powershell: |
    yarn monaco-compile-check
  displayName: Run Monaco Editor Checks
- script: |
    yarn strict-null-check
  displayName: Run Strict Null Checks
- powershell: |
    yarn compile
  displayName: Compile Sources
- powershell: |
    yarn download-builtin-extensions
  displayName: Download Built-in Extensions
#- powershell: |
#    .\scripts\test.bat --tfs "Unit Tests"
#  displayName: Run Unit Tests
#- powershell: |
#    .\scripts\test-integration.bat --tfs "Integration Tests"
#  displayName: Run Integration Tests
#- task: PublishTestResults@2
#  displayName: Publish Tests Results
#  inputs:
#    testResultsFiles: '*-results.xml'
#    searchFolder: '$(Build.ArtifactStagingDirectory)/test-results'
#  condition: succeededOrFailed()

- powershell: |
    # yarn gulp vscode-win32-ia32-min
    # yarn gulp vscode-win32-ia32-archive

    npx gulp vscode-win32-x64-min
    npx gulp vscode-win32-x64-copy-inno-updater
    npx gulp vscode-win32-x64-inno-updater
    # npx gulp vscode-win32-x64-system-setup
    npx gulp vscode-win32-x64-user-setup
    npx gulp vscode-win32-x64-archive

  displayName: "win32 build x64 archive"

#- task: ArchiveFiles@2
#  inputs:
#    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/.build/win32-ia32/archive/VSCode-win32-ia32.zip'
    #rootFolderOrFile: '$(System.DefaultWorkingDirectory)/../VSCode-win32-ia32'
#    includeRootFolder: false

- task: CopyFiles@2
  inputs:
    contents: .build\win32-x64\archive\*.zip
    targetFolder: $(Build.ArtifactStagingDirectory)

- task: CopyFiles@2
  inputs:
    contents: .build\win32-x64\**\*.exe
    targetFolder: $(Build.ArtifactStagingDirectory)


- task: PublishBuildArtifacts@1
  inputs:
     artifactName: drop-win32-x64

#    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
#    artifactName: drop

# GitHub Release
# Create, edit, or discard a GitHub release.
#- task: GithubRelease@0
#  inputs:
#    gitHubConnection:
#    repositoryName:
    #action: 'create' # Options: create, edit, discard
    #target: '$(build.sourceVersion)' # Required when action == create || action == edit
    #tagSource: 'auto' # Required when action == create. Options: auto, manual
    #tag: # Required when action == edit || action == discard || tagSource == manual
    #title: # Optional
    #releaseNotesSource: 'file' # Optional. Options: file, input
    #releaseNotesFile: # Optional
    #releaseNotes: # Optional
    #assets: '$(build.artifactStagingDirectory)/*' # Optional
    #assetUploadMode: 'delete' # Optional. Options: delete, replace
    #isDraft: false # Optional
    #isPreRelease: false # Optional
    #addChangeLog: true # Optional


# - task: GithubRelease@0
#  inputs:
#    gitHubConnection: hernad
#    repositoryName: hernad/eShell
#    assets: $(build.artifactstagingdirectory)/*.zip
#    action: 'create'
#    target: '$(build.sourceVersion)'
#    tagSource: 'manual'
#    tag: '$(myVariableForUserDefinedTag)'
#    title: 'Tag Title'
#    assetUploadMode: 'delete'
#    isDraft: true