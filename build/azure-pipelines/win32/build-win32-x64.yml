steps:
- task: NodeTool@0
  inputs:
    versionSpec: "8.12.0"
- powershell: |
    npm install -g yarn
  displayName: hernad - Install yarn with npm
- task: UsePythonVersion@0
  inputs:
    versionSpec: '2.x'
    addToPath: true
- powershell: |
    . build/azure-pipelines/win32/exec.ps1
    $ErrorActionPreference = "Stop"
    # "machine monacotools.visualstudio.com password $(VSO_PAT)" | Out-File "$env:USERPROFILE\_netrc" -Encoding ASCII
    $env:npm_config_arch="$(VSCODE_ARCH)"
    $env:CHILD_CONCURRENCY="1"
    # $env:VSCODE_MIXIN_PASSWORD="$(VSCODE_MIXIN_PASSWORD)"
    exec { yarn }
    # exec { npm run gulp -- hygiene }
    exec { npm run monaco-compile-check }
    exec { npm run strict-null-check }
    exec { npm run gulp -- mixin }
    exec { node build/azure-pipelines/common/installDistro.js }
    exec { node build/lib/builtInExtensions.js }
  displayName: yarn prep
#- powershell: |
#    yarn gulp electron
#  displayName: Download Electron
# - powershell: |
#    yarn gulp hygiene
#  displayName: Run Hygiene Checks
#- powershell: |
#    yarn monaco-compile-check
#  displayName: Run Monaco Editor Checks
#- script: |
#    yarn strict-null-check
#  displayName: Run Strict Null Checks
#- powershell: |
#    yarn compile
#  displayName: Compile Sources
#- powershell: |
#    yarn download-builtin-extensions
#  displayName: Download Built-in Extensions
#- powershell: |
#    .\scripts\test.bat --tfs "Unit Tests"
#  displayName: Run Unit Tests
#- powershell: |
#    .\scripts\test-integration.bat --tfs "Integration Tests"
#  displayName: Run Integration Tests
#- task: PublishTestResults@2
#  displayName: Publish Tests Results
#  inputs:
#    testResultsFiles: '*-results.xml'
#    searchFolder: '$(Build.ArtifactStagingDirectory)/test-results'
#  condition: succeededOrFailed()

- powershell: |
    npx gulp vscode-win32-$(VSCODE_ARCH)-min
    npx gulp vscode-win32-$(VSCODE_ARCH)-copy-inno-updater
    npx gulp vscode-win32-$(VSCODE_ARCH)-inno-updater
    # npx gulp vscode-win32-$(VSCODE_ARCH)-system-setup
    npx gulp vscode-win32-$(VSCODE_ARCH)-user-setup
    # npx gulp vscode-win32-x64-archive
  displayName: "win32 build $(VSCODE_ARCH) zip"

#- task: ArchiveFiles@2
#  inputs:
#    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/.build/win32-ia32/archive/VSCode-win32-ia32.zip'
    #rootFolderOrFile: '$(System.DefaultWorkingDirectory)/../VSCode-win32-ia32'
#    includeRootFolder: false


#- task: CopyFiles@2
#  inputs:
#    contents: .build\win32-x64\archive\*.zip
#    targetFolder: $(Build.ArtifactStagingDirectory)
#- task: CopyFiles@2
#  inputs:
#    contents: .build\win32-x64\**\*.exe
#    targetFolder: $(Build.ArtifactStagingDirectory)


#- task: PublishBuildArtifacts@1
#  inputs:
#     artifactName: drop-win32-x64

#    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
#    artifactName: drop

# GitHub Release
# Create, edit, or discard a GitHub release.
#- task: GithubRelease@0
#  inputs:
#    gitHubConnection:
#    repositoryName:
    #action: 'create' # Options: create, edit, discard
    #target: '$(build.sourceVersion)' # Required when action == create || action == edit
    #tagSource: 'auto' # Required when action == create. Options: auto, manual
    #tag: # Required when action == edit || action == discard || tagSource == manual
    #title: # Optional
    #releaseNotesSource: 'file' # Optional. Options: file, input
    #releaseNotesFile: # Optional
    #releaseNotes: # Optional
    #assets: '$(build.artifactStagingDirectory)/*' # Optional
    #assetUploadMode: 'delete' # Optional. Options: delete, replace
    #isDraft: false # Optional
    #isPreRelease: false # Optional
    #addChangeLog: true # Optional

- script: |
    git clone https://github.com/lazka/msys2-ci-base.git %CD:~0,2%\msys64
    %CD:~0,2%\msys64\usr\bin\rm -rf %CD:~0,2%\msys64\.git

    set PATH=%CD:~0,2%\msys64\usr\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem
    %CD:~0,2%\msys64\usr\bin\pacman --noconfirm -Syyuu
    #%CD:~0,2%\msys64\usr\bin\pacman --noconfirm --needed -S curl zip unzip

    %CD:~0,2%\msys64\usr\bin\sed -i "s|#CacheDir.*|CacheDir=/c/Users/%USERNAME%/AppData/Local/Temp|g" /etc/pacman.conf
    %CD:~0,2%\msys64\usr\bin\bash -lc "bash upload_bintray_win32.sh"
  displayName: upload to bintray eShell windows 64-bit
  env:
    CHERE_INVOKING: yes
    BINTRAY_API_KEY: $(BINTRAY_API_KEY)
