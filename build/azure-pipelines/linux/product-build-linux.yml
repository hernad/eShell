steps:
- task: NodeTool@0
  inputs:
    versionSpec: "10.15.1"

#- task: geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@2
#  inputs:
#    versionSpec: "1.10.1"
- script: |
    npm install -g yarn
  displayName: hernad - Install yarn with npm

- script: |
    set -e
    export npm_config_arch="$(VSCODE_ARCH)"
    if [[ "$(VSCODE_ARCH)" == "ia32" ]]; then
      export PKG_CONFIG_PATH="/usr/lib/i386-linux-gnu/pkgconfig"
    fi

    cat << EOF > ~/.netrc
    machine monacotools.visualstudio.com
    password $(VSO_PAT)
    machine github.com
    login vscode
    password $(VSCODE_MIXIN_PASSWORD)
    EOF

    git config user.email "vscode@microsoft.com"
    git config user.name "VSCode"
    git remote add distro "https://github.com/$(VSCODE_MIXIN_REPO).git"
    git fetch distro
    git merge $(node -p "require('./package.json').distro")

    CHILD_CONCURRENCY=1 yarn
    yarn gulp mixin
    yarn gulp hygiene
    yarn monaco-compile-check
    node build/azure-pipelines/common/installDistro.js
    node build/lib/builtInExtensions.js
  displayName: Prepare build

- script: |
    set -e
    VSCODE_MIXIN_PASSWORD="$(VSCODE_MIXIN_PASSWORD)" \
    ./build/azure-pipelines/linux/build.sh
  displayName: Build

- script: |
    set -e
    yarn gulp "electron-$(VSCODE_ARCH)"

    # xvfb seems to be crashing often, let's make sure it's always up
    service xvfb start

    DISPLAY=:10 ./scripts/test.sh --build --tfs "Unit Tests"
    # yarn smoketest -- --build "$(agent.builddirectory)/VSCode-linux-$(VSCODE_ARCH)"
  displayName: Run unit tests

- script: |
    set -e
    AZURE_DOCUMENTDB_MASTERKEY="$(AZURE_DOCUMENTDB_MASTERKEY)" \
    AZURE_STORAGE_ACCESS_KEY_2="$(AZURE_STORAGE_ACCESS_KEY_2)" \
    MOONCAKE_STORAGE_ACCESS_KEY="$(MOONCAKE_STORAGE_ACCESS_KEY)" \
    node build/azure-pipelines/common/publish.js "$VSCODE_QUALITY" "$PLATFORM_LINUX" archive-unsigned "$TARBALL_FILENAME" "$VERSION" true "$TARBALL_PATH"

    # Publish hockeyapp symbols
    node build/azure-pipelines/common/symbols.js "$(VSCODE_MIXIN_PASSWORD)" "$(VSCODE_HOCKEYAPP_TOKEN)" "$(VSCODE_ARCH)" "$(VSCODE_HOCKEYAPP_ID_LINUX64)"

    # Publish DEB
    npm run gulp -- "vscode-linux-$(VSCODE_ARCH)-build-deb"
    PLATFORM_DEB="linux-deb-$ARCH"
    [[ "$ARCH" == "ia32" ]] && DEB_ARCH="i386" || DEB_ARCH="amd64"
    DEB_FILENAME="$(ls $REPO/.build/linux/deb/$DEB_ARCH/deb/)"
    DEB_PATH="$REPO/.build/linux/deb/$DEB_ARCH/deb/$DEB_FILENAME"

    AZURE_DOCUMENTDB_MASTERKEY="$(AZURE_DOCUMENTDB_MASTERKEY)" \
    AZURE_STORAGE_ACCESS_KEY_2="$(AZURE_STORAGE_ACCESS_KEY_2)" \
    MOONCAKE_STORAGE_ACCESS_KEY="$(MOONCAKE_STORAGE_ACCESS_KEY)" \
    node build/azure-pipelines/common/publish.js "$VSCODE_QUALITY" "$PLATFORM_DEB" package "$DEB_FILENAME" "$VERSION" true "$DEB_PATH"

    # Publish RPM
    npm run gulp -- "vscode-linux-$(VSCODE_ARCH)-build-rpm"
    PLATFORM_RPM="linux-rpm-$ARCH"
    [[ "$ARCH" == "ia32" ]] && RPM_ARCH="i386" || RPM_ARCH="x86_64"
    RPM_FILENAME="$(ls $REPO/.build/linux/rpm/$RPM_ARCH/ | grep .rpm)"
    RPM_PATH="$REPO/.build/linux/rpm/$RPM_ARCH/$RPM_FILENAME"

    AZURE_DOCUMENTDB_MASTERKEY="$(AZURE_DOCUMENTDB_MASTERKEY)" \
    AZURE_STORAGE_ACCESS_KEY_2="$(AZURE_STORAGE_ACCESS_KEY_2)" \
    MOONCAKE_STORAGE_ACCESS_KEY="$(MOONCAKE_STORAGE_ACCESS_KEY)" \
    node build/azure-pipelines/common/publish.js "$VSCODE_QUALITY" "$PLATFORM_RPM" package "$RPM_FILENAME" "$VERSION" true "$RPM_PATH"

    ## Publish Snap
    #npm run gulp -- "vscode-linux-$(VSCODE_ARCH)-prepare-snap"
#
    ## Pack snap tarball artifact, in order to preserve file perms
    #mkdir -p $REPO/.build/linux/snap-tarball
    #SNAP_TARBALL_PATH="$REPO/.build/linux/snap-tarball/snap-$(VSCODE_ARCH).tar.gz"
    #rm -rf $SNAP_TARBALL_PATH
    #(cd .build/linux && tar -czf $SNAP_TARBALL_PATH snap)

- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
  displayName: 'Component Detection'
  continueOnError: true

- task: PublishPipelineArtifact@0
  displayName: 'Publish Pipeline Artifact'
  inputs:
    artifactName: snap-$(VSCODE_ARCH)
    targetPath: .build/linux/snap-tarball
